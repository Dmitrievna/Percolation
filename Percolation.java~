import edu.princeton.cs.algs4.WeightedQuickUnionUF;
import java.util.Random;

public class Percolation {
   
   private int size;
   private int[][] workSite; 
   private WeightedQuickUnionUF unionArray;    
    
    
    
   public Percolation(int n) { // create n-by-n grid, with all sites blocked
       
       this.size = n;
       this.workSite = new int[this.size][this.size];
       unionArray = new WeightedQuickUnionUF(this.size * this.size + 2);
       
       for (int i = 0; i < this.size; i++) {
           
           for (int j = 0; j < this.size; j++) {
           
           workSite[i][j] = 1;
           
           }  
       }
   }
   
    // validate that i is a valid index
    private void validate(int i) {
           if (i < 1 || i >= size + 1) {
            throw new IndexOutOfBoundsException("index " + i + " is not between 1 and " + (size + 1));  
        }
    }
   
   
   private int size() {
       
       return this.size;
   }
       
   public void open(int i, int j) {         // open site (row i, column j) if it is not open already
    
           
         validate(i); //  check
         validate(j);
         workSite[i-1][j-1] = 0; // now it is opened
         
         if (i - 1 == 0) { 
             
             unionArray.union(0, j);
             toFull(i, j);
         }
         
         if (i - 1 == size - 1) { 
             
             unionArray.union((size*(i - 1) + j), (size*size + 1)); 
         }
         
         if ((i - 2 >= 0) && (isFull(i - 1, j))) { 
             
             toFull(i, j);
             unionArray.union((size * (i - 1) +j), (size*(i - 2) + j));
         }
         
         if ((j - 2 >= 0) && (isFull(i, j - 1))) {
             
             toFull(i, j);
             unionArray.union((size*(i - 1) + j), (size*(i - 1) + j - 1));
         
         }
         
         if ((i <= size - 1) && (isFull(i + 1, j))) {
             
             toFull(i, j);
             unionArray.union((size*(i - 1) + j), (size*i + j)); 
         }
         
         if ((j <= size - 1) && (isFull(i, j + 1))) { 
             
             toFull(i, j);
             unionArray.union((size*(i - 1) + j), (size*(i - 1) + j + 1));
             
         }    
            
           
      
   }
   
   private void toFull(int i, int j) {
   
       validate(i);
       validate(j);
       workSite[i-1][j-1] = 2;
       if ((i - 2 >= 0) && (isOpen(i - 1, j))) { 
           toFull(i - 1, j);
           unionArray.union((size*(i - 1) + j), (size*(i - 2) + j));
       }
       if ((j-2 >= 0) && (isOpen(i, j - 1))) { 
           toFull(i, j - 1);
           unionArray.union((size*(i - 1) + j), (size*(i - 1)+j-1));
       }
       if ((i <= size - 1) && (isOpen(i + 1, j))) {
           
           toFull(i + 1, j);
           unionArray.union((size*(i - 1) + j), (size*i + j));
       }
       if ((j <= size - 1) && (isOpen(i, j + 1))) { 
           
           toFull(i, j + 1);
           unionArray.union((size*(i - 1) + j), (size*(i - 1) + j + 1));
       
       }
       
   
   }
   
   public boolean isFull(int i, int j) {    // is site (row i, column j) full? 
       
     
           validate(i);
           validate(j);
           
           return (workSite[i-1][j-1] == 2);
           
   
           
           
  }
   
   public boolean isOpen(int i, int j) {    // is site (row i, column j) open? 
       
           validate(i);
           validate(j);
           
           return (workSite[i-1][j-1] == 0);
           

   }
   

   
   public boolean percolates() {             // does the system percolate?
            

        return unionArray.connected(0, size*size + 1);    
   }
   
   
   
   
  

   public static void main(String[] args)  // test client (optional)
   {
       Percolation newPerc = new Percolation(5);
    
       final Random random = new Random();
       int a = -15;
       int b = -15;
       
       for (int i = 1; i < 6; i++) {
       
           for (int j = 1; j < 6; j++) {
           
           a = random.nextInt(5);
           b = random.nextInt(5);
           a++;
           b++;
           newPerc.open(a, b);
           
           
           
           
           }
       
       }

       
       

   }

}